name: Build Binaries (Manual)

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build for'
        required: true
        default: 'linux,windows,macos'
        type: choice
        options:
          - 'linux,windows,macos'
          - 'linux'
          - 'windows'
          - 'macos'
          - 'linux,windows'
          - 'linux,macos'
          - 'windows,macos'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_extension: ""
            archive_extension: ".tar.gz"
          - os: windows-latest
            platform: windows
            arch: x64
            binary_extension: ".exe"
            archive_extension: ".zip"
          - os: macos-latest
            platform: macos
            arch: x64
            binary_extension: ""
            archive_extension: ".tar.gz"
          - os: macos-latest
            platform: macos
            arch: arm64
            binary_extension: ""
            archive_extension: ".tar.gz"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check if platform should be built
        id: should_build
        run: |
          if [[ "${{ github.event.inputs.platforms }}" == *"${{ matrix.platform }}"* ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
          else
            echo "build=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.should_build.outputs.build == 'true'
        uses: actions/checkout@v4

      - name: Set up Python
        if: steps.should_build.outputs.build == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies (Ubuntu)
        if: steps.should_build.outputs.build == 'true' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-tk \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1 \
            libgcc-s1

      - name: Install system dependencies (macOS)
        if: steps.should_build.outputs.build == 'true' && matrix.os == 'macos-latest'
        run: |
          brew install python-tk || true

      - name: Create virtual environment
        if: steps.should_build.outputs.build == 'true'
        run: |
          python -m venv venv
          
      - name: Activate virtual environment (Windows)
        if: steps.should_build.outputs.build == 'true' && matrix.os == 'windows-latest'
        run: |
          venv\Scripts\activate
          echo "VIRTUAL_ENV=${{ github.workspace }}\venv" >> $GITHUB_ENV
          echo "${{ github.workspace }}\venv\Scripts" >> $GITHUB_PATH

      - name: Activate virtual environment (Unix)
        if: steps.should_build.outputs.build == 'true' && matrix.os != 'windows-latest'
        run: |
          source venv/bin/activate
          echo "VIRTUAL_ENV=${{ github.workspace }}/venv" >> $GITHUB_ENV
          echo "${{ github.workspace }}/venv/bin" >> $GITHUB_PATH

      - name: Install dependencies and build
        if: steps.should_build.outputs.build == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools pyinstaller==6.3.0
          pip install requests>=2.31.0 Pillow>=9.0.0 numpy>=1.21.0
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
          pip install transformers>=4.20.0 opencv-python-headless>=4.5.0 pymupdf>=1.20.0

      - name: Create stub babeldoc module
        if: steps.should_build.outputs.build == 'true'
        run: |
          python -c "
          import os
          stub_dir = 'babeldoc_stub'
          os.makedirs(f'{stub_dir}/babeldoc/format/pdf', exist_ok=True)
          os.makedirs(f'{stub_dir}/babeldoc/translator', exist_ok=True)
          os.makedirs(f'{stub_dir}/babeldoc/docvision', exist_ok=True)
          
          init_files = [
              f'{stub_dir}/babeldoc/__init__.py',
              f'{stub_dir}/babeldoc/format/__init__.py',
              f'{stub_dir}/babeldoc/format/pdf/__init__.py',
              f'{stub_dir}/babeldoc/translator/__init__.py',
              f'{stub_dir}/babeldoc/docvision/__init__.py'
          ]
          
          for init_file in init_files:
              with open(init_file, 'w') as f:
                  f.write('# Stub module\n')
          
          with open(f'{stub_dir}/babeldoc/format/pdf/high_level.py', 'w') as f:
              f.write('def translate_pdf(*args, **kwargs): raise ImportError(\"BabelDOC not available\")')
          
          with open(f'{stub_dir}/babeldoc/format/pdf/translation_config.py', 'w') as f:
              f.write('class TranslationConfig: def __init__(self, *args, **kwargs): raise ImportError(\"BabelDOC not available\")')
          
          with open(f'{stub_dir}/babeldoc/translator/translator.py', 'w') as f:
              f.write('class OpenAITranslator: def __init__(self, *args, **kwargs): raise ImportError(\"BabelDOC not available\")')
          
          with open(f'{stub_dir}/babeldoc/docvision/doclayout.py', 'w') as f:
              f.write('class DocLayoutModel: def __init__(self, *args, **kwargs): raise ImportError(\"BabelDOC not available\")')
          "

      - name: Build with PyInstaller
        if: steps.should_build.outputs.build == 'true'
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            export ARCHFLAGS="-arch arm64"
            pyinstaller --onefile --windowed --name pdf-translator-gui --target-arch arm64 src/main.py
          else
            pyinstaller --onefile --windowed --name pdf-translator-gui src/main.py
          fi

      - name: Create archive name
        if: steps.should_build.outputs.build == 'true'
        id: archive_name
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          if [ "${{ matrix.platform }}" = "macos" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            ARCHIVE_NAME="pdf-translator-gui-${{ matrix.platform }}-${{ matrix.arch }}-${TIMESTAMP}"
          else
            ARCHIVE_NAME="pdf-translator-gui-${{ matrix.platform }}-${{ matrix.arch }}-${TIMESTAMP}"
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - name: Create archive (Unix)
        if: steps.should_build.outputs.build == 'true' && matrix.os != 'windows-latest'
        run: |
          cd dist
          tar -czf "../${{ steps.archive_name.outputs.ARCHIVE_NAME }}${{ matrix.archive_extension }}" pdf-translator-gui${{ matrix.binary_extension }}

      - name: Create archive (Windows)
        if: steps.should_build.outputs.build == 'true' && matrix.os == 'windows-latest'
        run: |
          cd dist
          7z a "../${{ steps.archive_name.outputs.ARCHIVE_NAME }}${{ matrix.archive_extension }}" pdf-translator-gui${{ matrix.binary_extension }}

      - name: Upload build artifacts
        if: steps.should_build.outputs.build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive_name.outputs.ARCHIVE_NAME }}
          path: ./${{ steps.archive_name.outputs.ARCHIVE_NAME }}${{ matrix.archive_extension }}
          retention-days: 7
